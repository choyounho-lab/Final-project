<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.kh.mapper.BoardMapper">

    <!-- 게시물 목록 -->
    <select id="selectBoard" parameterType="SearchHelper" resultType="BoardVO">
        SELECT
        A.id
        , A.title
        , A.content
        , A.start_date
        , A.end_date
        , A.created_at
        , A.updated_at
        , A.reg_id
        , A.mod_id
        FROM board A
        <where>
            <if test="searchCode != null and searchCode != ''">
                AND A.code = #{searchCode}
            </if>
            <if test="searchType.equals('title')">
                AND A.TITLE LIKE '%' || #{searchKeyword} || '%'
            </if>
            <if test="searchType.equals('content')">
                AND A.CONTENT LIKE '%' || #{searchKeyword} || '%'
            </if>
        </where>
        ORDER BY id DESC
        OFFSET #{page} ROWS FETCH NEXT #{size} ROWS ONLY
    </select>

    <!-- 게시물 목록 카운트 -->
    <select id="countBoard" parameterType="SearchHelper" resultType="int">
        SELECT COUNT(*)
        FROM board A
        <where>
            <if test="searchCode != null and searchCode != ''">
                AND A.code = #{searchCode}
            </if>
            <if test="searchType.equals('title')">
                AND A.TITLE LIKE '%' || #{searchKeyword} || '%'
            </if>
            <if test="searchType.equals('content')">
                AND A.CONTENT LIKE '%' || #{searchKeyword} || '%'
            </if>
        </where>
    </select>

    <!-- 게시물 저장 -->
    <insert id="boardSave" parameterType="BoardVO" useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
        INSERT INTO board (CODE, TITLE, CONTENT, REG_ID, CREATED_AT, MOD_ID, UPDATED_AT)
        VALUES (
        #{code}
        , #{title}
        , #{content}
        , #{regId}
        , SYSDATE
        , #{modId}
        , SYSDATE
        )
    </insert>

    <!-- 게시물 조회 -->
    <select id="boardInfo" parameterType="Long" resultType="BoardVO">
        SELECT
        id
        , code
        , title
        , content
        , start_date
        , end_date
        , created_at
        , reg_id
        , mod_id
        , updated_at
        FROM board
        WHERE id = #{id}
    </select>

    <!-- 게시물 수정 -->
    <update id="updateBoard" parameterType="BoardVO">
        UPDATE board SET
        title = #{title}
        , content = #{content}
        , mod_id = #{modId}
        , updated_at = SYSDATE
        WHERE id = #{id}
    </update>

    <!-- 게시물 삭제 -->
    <delete id="deleteBoard" parameterType="Long">
        DELETE FROM board
        WHERE id = #{id}
    </delete>


    <!--    이벤트 처리 쿼리문 -->
    <!-- 이벤트 리스트 -->
    <select id="selectEventWithPrizes" parameterType="kr.co.kh.model.vo.SearchHelper" resultType="kr.co.kh.model.vo.EventPrizeDetailVO">
        SELECT
        AE.EVENT_ID,
        AE.EVENT_CODE,
        AE.EVENT_TITLE,
        AE.EVENT_CONTENT,
        AE.EVENT_CREATE_ID,
        AE.EVENT_CREATE_DATE,
        AE.EVENT_UPDATE_ID,
        AE.EVENT_UPDATE_DATE,
        AE.EVENT_START_DATE,
        AE.EVENT_END_DATE,
        EP.PRIZE_ID,
        EP.PRIZE_NAME,
        EP.QUANTITY,
        EP.PRIZE_DESC
        FROM ADMIN_EVENT AE
        LEFT JOIN EVENT_PRIZE EP ON AE.EVENT_ID = EP.EVENT_ID
        <where>
            <!-- 이벤트 코드 검색 -->
            <if test="searchCode != null and searchCode != ''">
                AND AE.EVENT_CODE = #{searchCode}
            </if>
            <!-- 제목 또는 내용 검색 -->
            <if test="searchType != null">
                <choose>
                    <when test="searchType.equals('title')">
                        AND AE.EVENT_TITLE LIKE '%' || #{searchKeyword} || '%'
                    </when>
                    <when test="searchType.equals('content')">
                        AND AE.EVENT_CONTENT LIKE '%' || #{searchKeyword} || '%'
                    </when>
                    <!-- 추가적으로 경품 이름으로도 검색하고 싶다면 -->
                    <when test="searchType.equals('prizeName')">
                        AND EP.PRIZE_NAME LIKE '%' || #{searchKeyword} || '%'
                    </when>
                    <!-- 모든 텍스트 필드에서 검색하고 싶다면 -->
                    <when test="searchType.equals('all')">
                        AND (
                        AE.EVENT_TITLE LIKE '%' || #{searchKeyword} || '%'
                        OR AE.EVENT_CONTENT LIKE '%' || #{searchKeyword} || '%'
                        OR EP.PRIZE_NAME LIKE '%' || #{searchKeyword} || '%'
                        OR EP.PRIZE_DESC LIKE '%' || #{searchKeyword} || '%'
                        )
                    </when>
                </choose>
            </if>
            <!-- 특정 기간 내의 이벤트 검색 (예: 현재 진행 중인 이벤트) -->
            <!-- SearchHelper에 currentOnly, startDate, endDate 등의 필드를 추가하여 활용 가능 -->
            <!--
            <if test="currentOnly != null and currentOnly == true">
                AND SYSTIMESTAMP BETWEEN AE.EVENT_START_DATE AND AE.EVENT_END_DATE
            </if>
            <if test="searchStartDate != null">
                AND AE.EVENT_END_DATE >= #{searchStartDate}
            </if>
            <if test="searchEndDate != null">
                AND AE.EVENT_START_DATE <= #{searchEndDate}
            </if>
            -->
        </where>
        ORDER BY AE.EVENT_ID DESC
        OFFSET #{page} ROWS FETCH NEXT #{size} ROWS ONLY
    </select>

    <!-- 총 이벤트 개수를 세는 쿼리 추가 -->
    <select id="countEvent" parameterType="kr.co.kh.model.vo.SearchHelper" resultType="long">
        SELECT
        COUNT(DISTINCT AE.EVENT_ID) -- 중복 이벤트 방지를 위해 DISTINCT 사용
        FROM ADMIN_EVENT AE
        LEFT JOIN EVENT_PRIZE EP ON AE.EVENT_ID = EP.EVENT_ID
        <where>
            <!-- selectEventWithPrizes와 동일한 검색 조건 사용 -->
            <if test="searchCode != null and searchCode != ''">
                AND AE.EVENT_CODE = #{searchCode}
            </if>
            <if test="searchType != null">
                <choose>
                    <when test="searchType.equals('title')">
                        AND AE.EVENT_TITLE LIKE '%' || #{searchKeyword} || '%'
                    </when>
                    <when test="searchType.equals('content')">
                        AND AE.EVENT_CONTENT LIKE '%' || #{searchKeyword} || '%'
                    </when>
                    <when test="searchType.equals('prizeName')">
                        AND EP.PRIZE_NAME LIKE '%' || #{searchKeyword} || '%'
                    </when>
                    <when test="searchType.equals('all')">
                        AND (
                        AE.EVENT_TITLE LIKE '%' || #{searchKeyword} || '%'
                        OR AE.EVENT_CONTENT LIKE '%' || #{searchKeyword} || '%'
                        OR EP.PRIZE_NAME LIKE '%' || #{searchKeyword} || '%'
                        OR EP.PRIZE_DESC LIKE '%' || #{searchKeyword} || '%'
                        )
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <select id="selectEventDetail" parameterType="Long" resultType="kr.co.kh.model.EventDetailResponse">
        SELECT
        AE.EVENT_ID,
        AE.EVENT_CODE,
        AE.EVENT_TITLE,
        AE.EVENT_CONTENT,
        AE.EVENT_CREATE_ID,
        AE.EVENT_CREATE_DATE,
        AE.EVENT_UPDATE_ID,
        AE.EVENT_UPDATE_DATE,
        AE.EVENT_START_DATE,
        AE.EVENT_END_DATE,
        EP.PRIZE_ID,
        EP.PRIZE_NAME,
        EP.QUANTITY,
        EP.PRIZE_DESC
        FROM ADMIN_EVENT AE
        LEFT JOIN EVENT_PRIZE EP ON AE.EVENT_ID = EP.EVENT_ID
        WHERE AE.EVENT_ID = #{eventId}
    </select>

    <insert id="insertApplicant" parameterType="map">
        INSERT INTO EVENT_APPLICANTS (
        EVENT_ID,
        USER_ID,
        APPLICATION_DATE
        ) VALUES (
        #{eventId},
        #{userId},
        #{applicationDate}
        )
    </insert>

    <select id="countUserApplication" resultType="int">
        SELECT COUNT(*)
        FROM EVENT_APPLICANTS
        WHERE USER_ID = #{userId} AND EVENT_ID = #{eventId}
    </select>

    <!--    공지사항 처리 쿼리문 -->
    <!-- 공지사항 목록 -->
    <select id="selectNotices" parameterType="SearchHelper" resultType="kr.co.kh.model.vo.NoticeVO"> SELECT
        N.NOTICE_ID
        , N.NOTICE_CODE_ID
        , N.NOTICE_TITLE
        , N.NOTICE_CONTENT
        , N.NOTICE_CREATE_ID
        , N.NOTICE_CREATE_DATE
        , N.NOTICE_UPDATE_ID
        , N.NOTICE_UPDATE_DATE FROM ADMIN_NOTICE N
        <where>
            <if test="searchCode != null and searchCode != ''">
                AND N.code = #{searchCode}
            </if>
            <if test="searchType != null and searchType.equals('title')"> AND N.NOTICE_TITLE LIKE '%' || #{searchKeyword} || '%'
            </if>
            <if test="searchType != null and searchType.equals('content')"> AND N.NOTICE_CONTENT LIKE '%' || #{searchKeyword} || '%'
            </if>
        </where>
        ORDER BY N.NOTICE_ID DESC
        OFFSET #{page} ROWS FETCH NEXT #{size} ROWS ONLY
    </select>

    <select id="countNotice" parameterType="SearchHelper" resultType="int">
        SELECT COUNT(N.NOTICE_ID)
        FROM ADMIN_NOTICE N
        <where>
            <if test="searchCode != null and searchCode != ''">
                AND N.code = #{searchCode}
            </if>
            <if test="searchType != null and searchType.equals('title')">
                AND N.NOTICE_TITLE LIKE '%' || #{searchKeyword} || '%'
            </if>
            <if test="searchType != null and searchType.equals('content')">
                AND N.NOTICE_CONTENT LIKE '%' || #{searchKeyword} || '%'
            </if>
        </where>
    </select>


<!--    댓글 관리 처리 쿼리문-->
    <!-- 댓글 목록을 조회 -->
<!--    <select id="findCommentsByTarget" resultType="kr.co.kh.model.vo.CommentsVO">-->
<!--        SELECT *-->
<!--        FROM COMMENTS C-->
<!--        JOIN USERS U ON C.USER_ID =U.USER_ID-->
<!--        WHERE TARGET_TYPE = #{targetType}-->
<!--        AND TARGET_ID = #{targetId}-->
<!--        ORDER BY C.COMMENT_ID DESC-->
<!--    </select>-->
    <select id="findCommentsByTarget" resultType="kr.co.kh.model.vo.CommentsVO">
        SELECT
                *
        FROM COMMENTS C
        JOIN USERS U ON C.USER_ID = U.USER_ID
        WHERE C.TARGET_TYPE = 'ALBUM'
        AND C.TARGET_ID = '14JkAa6IiFaOh5s0nMyMU9'
        ORDER BY C.COMMENT_ID DESC
    </select>

    <!-- 댓글 추가 -->
    <insert id="insertComment" parameterType="kr.co.kh.model.vo.CommentsVO">
        INSERT INTO COMMENTS (TARGET_TYPE, TARGET_ID, CONTENT, USER_ID, CREATE_DATE)
        VALUES (#{targetType}, #{targetId}, #{content}, #{userId}, SYSTIMESTAMP)
    </insert>

    <!-- 댓글 수정 쿼리 -->
    <update id="updateComment" parameterType="map">
        UPDATE comments
        SET content = #{newContent}
        WHERE comment_id = #{commentId}
    </update>

    <!-- 댓글 삭제 -->
    <delete id="deleteComment" parameterType="Long">
        DELETE FROM COMMENTS WHERE COMMENT_ID = #{commentId}
    </delete>

    <!--    댓글 신고-->
    <insert id="commentReport" parameterType="kr.co.kh.model.vo.CommentReportVO">
        INSERT INTO COMMENT_REPORT (COMMENT_ID, USER_ID, REPORT_REASON)
        VALUES (#{commentId}, #{userId}, #{reportReason})
    </insert>



    <!-- 특정 댓글에 신고한 유저들의 ID 목록을 조회 -->
    <select id="findReportedByUserIds" resultType="Long">
        SELECT USER_ID
        FROM COMMENT_REPORT
        WHERE COMMENT_ID = #{commentId}
    </select>

    <!-- 특정 댓글에 대해 특정 유저가 신고했는지 여부를 확인하는 쿼리 -->
    <select id="countReportsByCommentAndUser" resultType="int">
        SELECT COUNT(*)
        FROM COMMENT_REPORT
        WHERE COMMENT_ID = #{commentId}
        AND USER_ID = #{userId}
    </select>


</mapper>