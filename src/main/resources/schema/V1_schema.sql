-- 1. ENTERTAINMENT
CREATE TABLE ENTERTAINMENT (
    ENT_ID NUMBER GENERATED ALWAYS AS IDENTITY,
    ENT_NAME         VARCHAR2(255) NOT NULL,
    ENT_FOUND_DATE   TIMESTAMP NOT NULL,
    ENT_CEO_NAME     VARCHAR2(500) NOT NULL,
    ENT_PHONE_NUM    CLOB NOT NULL,
    ENT_EMAIL        VARCHAR2(255) NOT NULL,
    ENT_URL          VARCHAR2(255) NOT NULL,
    ENT_DESC         VARCHAR2(255) NOT NULL,
    CONSTRAINT PK_ENTERTAINMENT PRIMARY KEY (ENT_ID)
);

-- 2. USER
CREATE TABLE USERS (
    USER_ID NUMBER GENERATED ALWAYS AS IDENTITY,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP  NOT NULL,
    UPDATED_AT	TIMESTAMP,
    IS_ACTIVE	NUMBER  NOT NULL,
    EMAIL     VARCHAR2(15)   NOT NULL,
    IS_EMAIL_VERIFIED     NUMBER  NOT NULL,
    NAME       VARCHAR2(255) NOT NULL,
    PASSWORD  VARCHAR2(255)      DEFAULT SYSTIMESTAMP NOT NULL,
    USERNAME   VARCHAR2(255),
    USER_PHONENUM VARCHAR2(255) NOT NULL,
    USER_NICKNAME VARCHAR2(255) NOT NULL,
    USER_GENDER VARCHAR2(255) NOT NULL,
    ROLE_ID NUMBER NOT NULL
    CONSTRAINT PK_USERS PRIMARY KEY (USER_ID),
    CONSTRAINT FK_USERS_ROLE FOREIGN KEY (ROLE_ID)
    REFERENCES ROLE (ROLE_ID)
);
ALTER TABLE USERS ADD ROLE_ID NUMBER;
ALTER TABLE USERS ADD CONSTRAINT FK_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ROLE_ID);


-- 3. ALBUM
CREATE TABLE ALBUM (
    ALBUM_ID       NUMBER         GENERATED ALWAYS AS IDENTITY,
    ALBUM_TITLE        VARCHAR2(255)  NOT NULL,
    ALBUM_RELEASE_DATE TIMESTAMP NOT NULL,
    ALBUM_COVER_IMAGE  VARCHAR2(500) NOT NULL,
    ALBUM_EXPLAIN      CLOB NOT NULL,
    CONSTRAINT PK_ALBUM PRIMARY KEY (ALBUM_ID)
);

-- 4. IMG
CREATE TABLE IMG (
    IMAGE_FILE_ID  NUMBER        GENERATED ALWAYS AS IDENTITY,
    IMAGE_FILE_NAME    VARCHAR2(255) NOT NULL,
    IMAGE_FILE_PATH    VARCHAR2(255) NOT NULL,
    IMAGE_FILE_EXT     VARCHAR2(255) NOT NULL,
    IMAGE_FILE_CREATOR VARCHAR2(255) NOT NULL,
    CONSTRAINT PK_IMG PRIMARY KEY (IMAGE_FILE_ID)
);



-- 5. STREAMING_HISTORY
CREATE TABLE STREAMING_HISTORY (
    ST_HISTORY_ID   NUMBER GENERATED ALWAYS AS IDENTITY,
    USER_ID         NUMBER        NOT NULL,
    TRACK_ID        NUMBER        NOT NULL,
    PLAYED_AT           TIMESTAMP,
    ST_HISTORY_DURATION NUMBER        NOT NULL,
    CONSTRAINT PK_STREAMING_HISTORY PRIMARY KEY (ST_HISTORY_ID),
    CONSTRAINT FK_STREAMING_HISTORY_USERS FOREIGN KEY (USER_ID)
    REFERENCES USERS (USER_ID)
);

-- 6. ARTIST
CREATE TABLE ARTIST (
    ARTIST_ID    NUMBER GENERATED ALWAYS AS IDENTITY,
    ENT_ID       NUMBER        NOT NULL,
    ARTIST_NAME      VARCHAR2(255) NOT NULL,
    ARTIST_BIO       CLOB,
    DEBUT_DATE       TIMESTAMP     NOT NULL,
    PROFILE_IMAGE    VARCHAR2(500) NOT NULL,
    CONSTRAINT PK_ARTIST PRIMARY KEY (ARTIST_ID),
    CONSTRAINT FK_ARTIST_ENT FOREIGN KEY (ENT_ID)
        REFERENCES ENTERTAINMENT (ENT_ID)
);

-- 7. GROUP
CREATE TABLE GROUPS (
    GROUP_ID       NUMBER        GENERATED ALWAYS AS IDENTITY,
    ARTIST_ID      NUMBER        NOT NULL,
    ENT_ID         NUMBER        NOT NULL,
    ARTIST_GROUPNAME   VARCHAR2(255) NOT NULL,
    CONSTRAINT PK_GROUPS PRIMARY KEY (GROUP_ID),
    CONSTRAINT FK_GROUPS_ARTIST FOREIGN KEY (ARTIST_ID)
        REFERENCES ARTIST (ARTIST_ID),
    CONSTRAINT FK_GROUPS_ENT FOREIGN KEY (ENT_ID)
        REFERENCES ENTERTAINMENT (ENT_ID)
);

-- user_number --> user_id로 사용하기

-- 8. PLAYLIST
CREATE TABLE PLAYLIST (
    PLAYLIST_ID      NUMBER         GENERATED ALWAYS AS IDENTITY,
    USER_ID          NUMBER         NOT NULL,
    PLAYLIST_TITLE       VARCHAR2(255)  NOT NULL,
    PLAYLIST_IS_PUBLIC   NUMBER(1),
    PLAYLIST_CREATE_DATE TIMESTAMP      DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT PK_PLAYLIST PRIMARY KEY (PLAYLIST_ID),
    CONSTRAINT FK_PLAYLIST_USER FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID)
);

-- 9. PURCHASE
CREATE TABLE PURCHASE (
    PURCHASE_ID     NUMBER        GENERATED ALWAYS AS IDENTITY,
    USER_ID         NUMBER        NOT NULL,
    PURCHASE_AMOUNT     NUMBER NOT NULL,
    PURCHASE_START_DATE TIMESTAMP     NOT NULL,
    PURCHASE_END_DATE   TIMESTAMP     NOT NULL,
    CONSTRAINT PK_PURCHASE PRIMARY KEY (PURCHASE_ID),
    CONSTRAINT FK_PURCHASE_USER FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID)
);



-- 10. TRACK
CREATE TABLE TRACK (
    TRACK_ID     	VARCHAR2(255)	PRIMARY KEY,
    TRACK_NAME      VARCHAR2(255)  	NOT NULL,
    TRACK_ARTIST 	VARCHAR2(255) 	NOT NULL,
    TRACK_DURATION  NUMBER         	NOT NULL,
    RELEASE_DATE 	TIMESTAMP,
    TRACK_IMAGE_URL VARCHAR2(500)
);
CREATE TABLE TRACK_PLAY_DATE (
	USER_ID NUMBER,
	TRACK_ID VARCHAR2(255) NOT NULL,
	PLAY_DATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);

-- 11. PLAYLIST_TRACK
CREATE TABLE PLAYLIST_TRACK (
    PLAYLIST_ID    NUMBER GENERATED ALWAYS AS IDENTITY,
    TRACK_ID       NUMBER NOT NULL,
    TRACK_ORDER    NUMBER NOT NULL,
    PLAYLIST_TRACK_CREATE_DATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);

-- 12. FAVORITE_TRACK
CREATE TABLE FAVORITE_TRACK (
    FAVORITE_TRACK_ID NUMBER        GENERATED ALWAYS AS IDENTITY,
    USER_ID           NUMBER        NOT NULL,
    TRACK_ID          NUMBER        NOT NULL,
    ALBUM_ID           NUMBER        NOT NULL,
    FAVORITE_CHOICE_DATE   TIMESTAMP     NOT NULL,
    CONSTRAINT PK_FAVORITE_TRACK PRIMARY KEY (FAVORITE_TRACK_ID),
    CONSTRAINT FK_FAVORITE_TRACK_USER FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID),
    CONSTRAINT FK_FAVORITE_TRACK_TRACK FOREIGN KEY (TRACK_ID)
        REFERENCES TRACK (TRACK_ID),
    CONSTRAINT FK_FAVORITE_TRACK_ALBUM FOREIGN KEY (ALBUM_ID)
        REFERENCES ALBUM (ALBUM_ID)
);

-- 13. LIKE
CREATE TABLE NICE (
    LIKE_ID    NUMBER GENERATED ALWAYS AS IDENTITY,
    USER_ID   NUMBER NOT NULL,
    TRACK_ID  NUMBER NOT NULL,
    LIKE_STATUE   CHAR   NOT NULL,
    CONSTRAINT PK_LIKE PRIMARY KEY (LIKE_ID),
    CONSTRAINT FK_LIKE_USER FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID),
    CONSTRAINT FK_LIKE_TRACK FOREIGN KEY (TRACK_ID)
        REFERENCES TRACK (TRACK_ID)
);


SELECT * FROM notice


-- 14. COMMENT
CREATE TABLE COMMENTS (
    COMMENT_ID         NUMBER          GENERATED ALWAYS AS IDENTITY,  -- 댓글 고유 번호 (PK)
    USER_ID        NUMBER          NOT NULL,  -- 작성자 (FK: USERS)
    TARGET_ID          NUMBER          NOT NULL,  -- 대상 ID (예: NOTICE_NUMBER 등)
    TARGET_TYPE        VARCHAR2(50)    NOT NULL,  -- 대상 유형 (예: 'NOTICE', 'TRACK')
    CONTENT            VARCHAR2(1000)  NOT NULL,  -- 댓글 내용
    CREATE_DATE        TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL, -- 작성일시
    UPDATE_DATE        TIMESTAMP,                -- 수정일시
    CONSTRAINT PK_COMMENT PRIMARY KEY (COMMENT_ID),
    CONSTRAINT FK_COMMENT_USER FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID)
);


-- 15. COMMENT_REPORT
CREATE TABLE COMMENT_REPORT (
    REPORT_ID       NUMBER          GENERATED ALWAYS AS IDENTITY,
    COMMENT_ID      NUMBER          NOT NULL,
    USER_ID     NUMBER          NOT NULL, -- 신고자 (USERS)
    REPORT_REASON   VARCHAR2(500)   NOT NULL,
    REPORT_DATE     TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT PK_COMMENT_REPORT PRIMARY KEY (REPORT_ID),
    CONSTRAINT FK_COMMENT_REPORT_COMMENT FOREIGN KEY (COMMENT_ID)
        REFERENCES COMMENTS (COMMENT_ID),
    CONSTRAINT FK_COMMENT_REPORT_USER FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID)
);


-- 16. ADMIN_NOTICE
CREATE TABLE ADMIN_NOTICE (
    NOTICE_ID NUMBER(11) GENERATED ALWAYS AS IDENTITY, -- 순번
    NOTICE_CODE NUMBER(11) NOT NULL, -- 게시물 구분 코드
    NOTICE_TITLE NVARCHAR2(1000) NOT NULL, -- 제목
    NOTICE_CONTENT CLOB, -- 내용
    NOTICE_CREATE_ID VARCHAR2(30) NOT NULL, -- 등록 id
    NOTICE_CREATE_DATE     TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
    NOTICE_UPDATE_ID VARCHAR2(30) NOT NULL, -- 수정 id
    NOTICE_UPDATE_DATE     TIMESTAMP,
    CONSTRAINT PK_ADMIN_NOTICE PRIMARY KEY (NOTICE_ID)
);

SELECT * FROM ADMIN_EVENT
-- 17. ADMIN_EVENT
CREATE TABLE ADMIN_EVENT (
    EVENT_ID NUMBER(11) GENERATED ALWAYS AS IDENTITY, -- 순번
    EVENT_CODE NUMBER(11) NOT NULL, -- 게시물 구분 코드
    EVENT_TITLE NVARCHAR2(1000) NOT NULL, -- 제목
    EVENT_CONTENT CLOB, -- 내용
    EVENT_CREATE_ID VARCHAR2(30) NOT NULL, -- 등록 id
    EVENT_CREATE_DATE     TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
    EVENT_UPDATE_ID VARCHAR2(30) NOT NULL, -- 수정 id
    EVENT_UPDATE_DATE     TIMESTAMP,
    EVENT_START_DATE TIMESTAMP NOT NULL,
    EVENT_END_DATE TIMESTAMP NOT NULL,
    CONSTRAINT PK_ADMIN_EVENT PRIMARY KEY (EVENT_ID)
);

-- 18. 경품 테이블
CREATE TABLE EVENT_PRIZE (
  PRIZE_ID        NUMBER GENERATED ALWAYS AS IDENTITY,
  EVENT_ID        NUMBER,
  PRIZE_NAME      VARCHAR2(100),
  QUANTITY        NUMBER,
  PRIZE_DESC      VARCHAR2(1000),
  CONSTRAINT PK_EVENT_PRIZE PRIMARY KEY (PRIZE_ID), -- 제약 조건 이름 변경 권장 (EVENT_PRIZE는 테이블명과 동일하여 혼동 방지)
  CONSTRAINT FK_EVENT_PRIZE_EVENT
    FOREIGN KEY (EVENT_ID) REFERENCES ADMIN_EVENT(EVENT_ID)
);

-- 19. 당첨자 테이블 (수정됨)
CREATE TABLE EVENT_WINNER (
  WINNER_ID       NUMBER  GENERATED ALWAYS AS IDENTITY,
  EVENT_ID        NUMBER, -- FK to ADMIN_EVENT(EVENT_ID)
  PRIZE_ID        NUMBER, -- FK to EVENT_PRIZE(PRIZE_ID) - 어떤 경품에 당첨되었는지 명시
  USER_ID         NUMBER, -- FK to USER(USER_ID) - 당첨자가 실제로 존재하는 사용자인지 검증
  WINNER_NAME     VARCHAR2(100),
  ANNOUNCE_DATE   DATE,
  CONSTRAINT PK_EVENT_WINNER PRIMARY KEY (WINNER_ID),
  CONSTRAINT FK_EVENT_WINNER_EVENT
    FOREIGN KEY (EVENT_ID) REFERENCES ADMIN_EVENT(EVENT_ID),
  CONSTRAINT FK_EVENT_WINNER_PRIZE
    FOREIGN KEY (PRIZE_ID) REFERENCES EVENT_PRIZE(PRIZE_ID),
  CONSTRAINT FK_EVENT_WINNER_USER
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
);


-- 20. 이벤트 지원자 테이블
CREATE TABLE EVENT_APPLICANTS (
  APPLICANTS_ID NUMBER GENERATED ALWAYS AS IDENTITY,
  EVENT_ID NUMBER,
  USER_ID NUMBER,
  APPLICATION_DATE TIMESTAMP,
  CONSTRAINT PK_EVENT_APPLICANTS PRIMARY KEY (APPLICANTS_ID),
  CONSTRAINT FK_EVENT_APPLICANTS_EVENT
    FOREIGN KEY (EVENT_ID) REFERENCES ADMIN_EVENT(EVENT_ID),
  CONSTRAINT FK_EVENT_APPLICANTS_USER
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

